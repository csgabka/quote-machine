{"version":3,"sources":["components/textBox.js","components/button.js","components/share.js","App.js","serviceWorker.js","index.js"],"names":["textBox","_ref","quoteText","quoteAuthor","react_default","a","createElement","className","id","button","loadNewQuote","onClick","share","data-href","data-layout","data-size","data-mobile-iframe","target","href","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","fetch","then","response","json","data","setState","quote","author","state","components_textBox","components_button","components_share","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAoBeA,SAlBC,SAAAC,GAA8B,IAA5BC,EAA4BD,EAA5BC,UAAWC,EAAiBF,EAAjBE,YAC3B,OACCC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,SAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,cAAYC,UAAU,mBACpBH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQN,GACdE,EAAAC,EAAAC,cAAA,UAAQE,GAAG,SAASD,UAAU,qBAAqBJ,SCJ9CM,EANA,SAAAR,GAAoB,IAAlBS,EAAkBT,EAAlBS,aACf,OACCN,EAAAC,EAAAC,cAAA,UAAQE,GAAG,YAAYD,UAAU,eAAeI,QAASD,GAAzD,oBCSYE,EAXD,WACZ,OACCR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQD,UAAU,kBAAkBM,YAAU,gDACtDC,cAAY,SAASC,YAAU,QAAQC,qBAAmB,QAC1DZ,EAAAC,EAAAC,cAAA,KAAGW,OAAO,SAASC,KAAK,yHACxBX,UAAU,yBADV,YCmCYY,cAnCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,UAAY,WACVC,MAAM,2CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIZ,EAAKa,SAAS,CAAEhC,UAAW+B,EAAKE,MAAOhC,YAAa8B,EAAKG,YAftDf,EAkBnBX,aAAe,WACbW,EAAKO,aAjBLP,EAAKgB,MAAQ,CACXnC,UAAW,GACXC,YAAa,IAJEkB,mFASjBG,KAAKI,6CAcL,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,GAAG,aAC5BJ,EAAAC,EAAAC,cAACgC,EAAD,CAASpC,UAAWsB,KAAKa,MAAMnC,UAAWC,YAAaqB,KAAKa,MAAMlC,cAClEC,EAAAC,EAAAC,cAACiC,EAAD,CAAQ7B,aAAcc,KAAKd,eAC3BN,EAAAC,EAAAC,cAACkC,EAAD,eA7BUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.2af3a327.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst textBox = ({quoteText, quoteAuthor}) => {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<div className=\"card\">\r\n\t\t\t\t  <div className=\"card-header\">\r\n\t\t\t\t    Quote\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <div className=\"card-body\">\r\n\t\t\t\t    <blockquote className=\"blockquote mb-0\">\r\n\t\t\t\t      <p id=\"text\">{quoteText}</p>\r\n\t\t\t\t      <footer id=\"author\" className=\"blockquote-footer\">{quoteAuthor}</footer>\r\n\t\t\t\t    </blockquote>\r\n\t\t\t\t  </div>\r\n\t\t\t</div>\r\n\t        </div>\r\n\t\t\t);\r\n}\r\n\r\nexport default textBox;","import React from 'react';\r\n\r\nconst button = ({loadNewQuote}) => {\r\n\t\treturn(\r\n\t\t\t<button id=\"new-quote\" className=\"btn btn-dark\" onClick={loadNewQuote}>Get a new quote</button>\r\n\t\t\t);\r\n}\r\n\r\nexport default button;","import React from 'react';\r\n\r\nconst share = () => {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<div id=\"share\" className=\"fb-share-button\" data-href=\"https://developers.facebook.com/docs/plugins/\"\r\n\t\t\tdata-layout=\"button\" data-size=\"small\" data-mobile-iframe=\"true\">\r\n\t\t\t<a target=\"_blank\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdevelopers.facebook.com%2Fdocs%2Fplugins%2F&amp;src=sdkpreparse\"\r\n\t\t\tclassName=\"fb-xfbml-parse-ignore\">Share</a></div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default share;","import React, { Component } from 'react';\nimport './App.css';\nimport TextBox from './components/textBox';\nimport Button from './components/button';\nimport Share from './components/share';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteText: '',\n      quoteAuthor: ''\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    fetch('https://talaikis.com/api/quotes/random/')\n    .then(response => response.json())\n    .then(data => this.setState({ quoteText: data.quote, quoteAuthor: data.author }));\n  }\n\n  loadNewQuote = () => {\n    this.fetchData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\" id=\"quote-box\">\n        <TextBox quoteText={this.state.quoteText} quoteAuthor={this.state.quoteAuthor}/>\n        <Button loadNewQuote={this.loadNewQuote}/>\n        <Share />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}